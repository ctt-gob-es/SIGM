// variables para rellenar el formulario en modificacionvar strPerName = "";var strApe1 = "";var strApe2 = "";var iPerType = 1;var iDocType = 1;var strNumDoc = "";var strPersonId = "0";// Funcion que cierra la ventana y si no encuentra resultados// saca un mensaje de informacion antes de cerrarlafunction CancelarNewInter(){   window.returnValue = "";   window.close();   return;}function HabilitarAceptar(oField, oEvent){	var valor = top.miTrim(top.Replace(oField.value));	if (oField.id == "oPerApe1") {		var otroCampo = top.miTrim(top.Replace(document.getElementById("oPerNombre").value));		document.getElementById("btnOK").disabled = !((valor != "") && (otroCampo != ""));	}	else if (oField.id == "oPerNombre") {		var otroCampo = top.miTrim(top.Replace(document.getElementById("oPerApe1").value));		document.getElementById("btnOK").disabled = !((valor != "") && (otroCampo != ""));	}	else {		document.getElementById("btnOK").disabled = (valor == "");	}	return;}//Detecta si pulsamos Intro y se hace un submitfunction PushIntro(oEvento){	if (top.strPersonId > 0){		oForm = top.VldNewInterForm.document.getElementById("frmVldNewInterForm");		if ((				(top.miTrim(top.Replace(document.getElementById("oPerApe1").value)) != "")				&&	(top.miTrim(top.Replace(document.getElementById("oPerNombre").value)) != "")			)			|| (top.miTrim(top.Replace(document.getElementById("oRazon").value)) != "")) {			document.getElementById("btnOK").disabled = false;		}	}	return;}//limita los textareas a un numero de caracteresfunction LimitMaxLength(oEvent, iMax){	var element = top.GetSrcElement(oEvent);	if (element.value.length >= iMax) {		element.value = element.value.substr(0,iMax);		top.PreventDefault(oEvent);	}}function onlyLetters(oEvent){	var element = top.GetSrcElement(oEvent);	if (element != null){		var charCode = top.GetKeyCode(oEvent);		if (charCode > 31 && (charCode >= 48 && charCode <= 57)){			return false;		}	}	return true;}function ValidateDocument(obj, typeDoc){	var formatOK = true;	var msgError = "", retDoc = "";	obj.value = top.Replace(obj.value.toUpperCase());	obj.value = top.miTrim(obj.value);	if (obj.value != ""){		var ndoc = obj.value;		switch (typeDoc){			case '1':				var kTAM = 9;				var letras = "ABCDEFGHJKLMNPQRSUVW";				var letrasCodNum = "ABCDEFGHIJUV";				var letrasCodLetra = "NPQRSW";				var codeCIF = ndoc.substr(0, 1);				if ((ndoc.length != kTAM) || (letras.indexOf(codeCIF) == -1)){					formatOK = false;				}				if (formatOK && ((letrasCodNum.indexOf(codeCIF) != -1) || (letrasCodLetra.indexOf(codeCIF) != -1))){					var Temp = ndoc.substr(0, kTAM - 1);					var Total = 0, index = 0;					Temp = Temp.substr(1);					for (var i = 1; i < Temp.length; i += 2){						var numero = parseInt(Temp.charAt(i), 10);						if (isNaN(numero)){							formatOK = false;						}						Total += numero;					}					for (var i = 0; i < Temp.length; i += 2){						var numero = parseInt(Temp.charAt(i), 10) * 2;						if (isNaN(numero)){							formatOK = false;						}						Total += Math.floor(numero/10) + numero%10;					}					index = 10 - (Total%10);					if (formatOK && letrasCodLetra.indexOf(codeCIF) != -1){						if (String.fromCharCode(64 + index) != ndoc.substr(ndoc.length - 1, 1))	{							retDoc = ndoc.substr(0, kTAM - 1) + String.fromCharCode(64 + index);							msgError = top.GetIdsLan("IDS_MSG_CIF_CORRECTED") + " " + retDoc;						}					}					else if (formatOK && letrasCodNum.indexOf(codeCIF) != -1){						if (index == 10){index = 0;}						if (index != parseInt(ndoc.substr(ndoc.length - 1, 1), 10)){							if (index == 10){index = 0;}							retDoc = ndoc.substr(0, kTAM - 1) + index.toString();							msgError = top.GetIdsLan("IDS_MSG_CIF_CORRECTED") + " " + retDoc;						}					}				}				if (!formatOK){					msgError = top.GetIdsLan("IDS_MSG_FMT_CIF_NOT_VALID");				}				break;			case '2':				var kTAM = 9;				var hayGuion = false;				if (ndoc.indexOf("-") == -1){					formatOK = (ndoc.length == kTAM);				}				else {					var Temp1 = ndoc.substr(0, ndoc.indexOf("-")), Temp2 = ndoc.substr(ndoc.indexOf("-") + 1);					formatOK = ((Temp1.length == kTAM - 1) && (Temp2.length == 1));					hayGuion = true;				}				if (formatOK){					var letras = "TRWAGMYFPDXBNJZSQVHLCKE";					var dni = ndoc.substr(0, kTAM - 1);					var numero = parseInt(ndoc.substr(0, kTAM - 1), 10)%23;					if (isNaN(dni)){						msgError = top.GetIdsLan("IDS_MSG_FMT_NIF_NOT_VALID");					}					else {						if (ndoc.substr(ndoc.length - 1) != letras.substring(numero, numero + 1)){							retDoc = ndoc.substr(0, kTAM - 1) + (hayGuion?"-":"") + letras.substring(numero, numero + 1);							msgError = parent.GetIdsLan("IDS_MSG_NIF_CORRECTED") + " " + retDoc;						}					}				}				else {					msgError = top.GetIdsLan("IDS_MSG_FMT_NIF_NOT_VALID");				}				break;			case '4':				//Validacion del NIE				var kTAM = 0;				var prefix = "";				var hayGuion = false;				var Temp = "";				//variable numerica del valor de la letra inicial del nie				var prefixValNum ="0";				//numero de posiciones a recortar				var numPosicCutCadena = 0;				//comprobamos el prefijo de la cadena de entrada				if(ndoc.substr(0, 2) == "X0"){					//si la cadena empieza por X0					//comprobamos si hay algun guion despues del prefijo					if(ndoc.substr(2, 1) == "-"){						//si justo despues del prefijo existe un guion el formato no es correcto						formatOK = false;					}else{						//comprobamos la longitud del nie sin contar los guiones						if((ndoc.replace("-","")).length >9){							//si la longitud es mayor a 9 digitos va por el metodo viejo							kTAM = 10;							prefix = "X0";							numPosicCutCadena = 2;						}else{							kTAM = 9;							numPosicCutCadena = 1;							prefix = "X";						}						//el formato de la cadena es correcto						formatOK = (ndoc.substr(0, numPosicCutCadena) == prefix);					}				}else{					kTAM = 9;					numPosicCutCadena = 1;					//buscamos el prefijo					if(ndoc.substr(0, 1) == "X"){						//si la cadena empieza por X						prefix = "X";					}else{						if(ndoc.substr(0, 1) == "Y"){							//si la cadena empieza por Y							prefix = "Y";							prefixValNum="1";						}else{							//si la cadena empieza por cualquier otra letra							prefix = "Z";							prefixValNum="2";						}					}					formatOK = (ndoc.substr(0, numPosicCutCadena) == prefix);				}				if (formatOK){					Temp = ndoc.substr(numPosicCutCadena);					if (Temp.substr(0, 1) == "-"){						Temp = Temp.substr(1);					}					if (Temp.indexOf("-") == -1){						formatOK = (Temp.length == kTAM - 1);					}					else {						var Temp1 = Temp.substr(0, Temp.indexOf("-")), Temp2 = Temp.substr(Temp.indexOf("-") + 1);						formatOK = ((Temp1.length == kTAM - 2) && (Temp2.length == 1));						hayGuion = true;					}				}				if (formatOK){					var letras = "TRWAGMYFPDXBNJZSQVHLCKE";					var numNIE = Temp.substr(0, kTAM - 2);					var nie = prefixValNum + numNIE;					var numero = parseInt(nie, 10)%23;					if (isNaN(numNIE)){						msgError = top.GetIdsLan("IDS_MSG_FMT_NIE_NOT_VALID");					} else {						if (Temp.substr(Temp.length - 1) != letras.substring(numero, numero + 1)){							retDoc = prefix + (hayGuion?"-":"") + Temp.substr(0, kTAM - 2) + (hayGuion?"-":"") + letras.substring(numero, numero + 1);							msgError = top.GetIdsLan("IDS_MSG_NIE_CORRECTED") + " " + retDoc;						}					}				}				else {					msgError = top.GetIdsLan("IDS_MSG_FMT_NIE_NOT_VALID");				}				break;			}		}		if (!formatOK){			alert(msgError);			// obj.value = "";		}		else if (msgError != ""){			alert(msgError);			obj.value = retDoc;		}		return formatOK;	}	function changeComboDoc()	{		var cmbDocType = document.getElementById("oTipoDocu");		var textDoc = document.getElementById("oDocumento");		if (top.strPersonId > 0){			document.getElementById("oDocumento").value = "";			document.getElementById("oDocumentoJur").value = "";			document.getElementById("btnOK").disabled = false;		}		ValidateDocument(textDoc, cmbDocType.options[cmbDocType.selectedIndex].value);	}	function changeComboTel()	{		var cmbTelType = document.getElementById("oSelectDir");		var textTel = document.getElementById("oTxtDirTel");		return ValidateTelematic(textTel, cmbTelType.options[cmbTelType.selectedIndex].value);	}	function ValidateTelematic(obj, typeTel)	{		var formatOK = true;		obj.value = top.miTrim(obj.value);		if (obj.value != ""){			var ndoc = obj.value;			switch (typeTel){				case '1':				case '3':				case '5':					if((ndoc.length < 9) || isNaN(ndoc)){							formatOK = false;					}					break;				case '2':					if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(ndoc))){							formatOK = false;					}				break;			}		}		if (!formatOK){				alert(top.GetIdsLan("IDS_MSG_FMT_TEL_NOT_VALID"));		}		return formatOK;	}function doBlur(obj){	var desc = top.miTrim(obj.value);	obj.value = top.Replace(desc);}